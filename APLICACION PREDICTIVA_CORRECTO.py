"""
NOMBRE DE LOS ALUMNOS:
DULCE CECILIA HERNANDES DE LA CRUZ.
ERICK GABRIEL LOPEZ MELO.
LEONARDO LEDESMA MERCADO.
NOMBRE DEL DOCENTE:
ELI HUSIM RUIZ CRUZ.
GRUPO:
605
MATERIA:
ANALISIS DEL LENGUAJE NATURAL.
CARRERA:
CIENCIA DE DATOS E INTELIGENCIA ARTIFICIAL.
SEMESTRE:
6.TO
FECHA:
19/05/2025
ACTIVIDAD:
EL CODIGO PARA LA REALIZACION DE LA PREDICCION CON BASE A LOS DATOS HISTORICOS QUE HEMOS OBTENIDOS DE LA INEGI.
"""

# 📚 PASO 1: IMPORTACION DE LAS LIBRERIAS NECESARIAS
import pandas as pd # MANEJO DE DATOS TIPO TABLA (DATAFRAMES)
from sklearn.linear_model import LinearRegression # MODELO PREDICTIVO EL CUAL ES LA REGRESION LINEAL
import numpy as np # SON PARA OPERACIONES NUMERICAS (NO USADO DIRECTAMENTE AQUI)
import matplotlib.pyplot as plt # PARA GRAFICAR
import seaborn as sns # PARA GRAFICOS ESTADISTICOS MAS ATRACTIVOS O PARA MEJORAR LOS GRAFICOS FORMADOS POR MATPLOTLIB

# 📁 PASO 2: RUTA DE ACCESO DEL ARCHIVO DE EXCEL
ruta_archivo = "D:/CONALEP/6TO.SEMESTRE/ANALISIS DEL LENGUAJE NATURAL/TRABAJOS/PROYECTO DE LA JORNADA TECNOLOGICA/DATOS HISTORICOS DEL ABANDONO ESCOLAR DE INEGI.xlsx" # AQUI DEFINIMOS LA RUTA DE ACCESO DEL ARCHIVO EXCEL LOS CUALES SON LOS DATOS HISTORICOS DEL ABANDONO ESCOLAR

# 📄 PASO 3: CARGAR Y TRANSFORMAR DATOS
df = pd.read_excel(ruta_archivo, sheet_name="Hoja1") # LA FUNCION READ ES PARA LEER NUESTRO ARCHIVO, PERO AQUI LO QUE HACE ES QUE SE CARGA LOS DATOS DESDE EL ARCHIVO EXCEL, UTILIZAMOS LA FUNCION PD DE PANDAS ES PARA IMPORTAR LOS DATOS DEL ARCHIVO EXCEL A UN OBJETO DATAFRAME

df_largo = df.melt(id_vars=["Entidad federativa", "Nivel educativo"], # MELT: LA FUNCION MELT ES PARA TRANSFORMAR UN DATAFRAME DE FORMATO ANCHO A LARGO
                   var_name="Ciclo escolar", value_name="Abandono (%)") # ESTA LINEA Y LA ANTERIOR TRANSFORMA LOS DATOS DE FORMATO ANCHO A FORMATO LARGO PARA FACILITAR EL ANALISIS
df_largo.columns = ["Entidad", "NivelEducativo", "Ciclo", "Abandono"]
df_largo.dropna(subset=["Abandono"], inplace=True) # AQUI ELIMINA FILAS CON DATOS FALTANTES
df_largo["Año"] = df_largo["Ciclo"].str.extract(r"(\d{4})").astype(int) # AQUI SE EXTRAE EL AÑO

# 📊 PASO 4: MODELO Y PREDICCION
resultados = [] # AQUI SE CREA UNA LISTA DE PARA ALMACENAR RESULTADOS POR ENTIDAD Y NIVEL EDUCATIVO

for (entidad, nivel), grupo in df_largo.groupby(["Entidad", "NivelEducativo"]): # DESDE AQUI
    grupo = grupo.sort_values("Año")
    if len(grupo) < 3:
        continue # HASTA AQUI AGRUPA LOS DATOS POR ENTIDAD Y NIVEL EDUCATIVO Y SOLO CONTINUA SI HAY  SUFICIENTES DATOS

    X = grupo["Año"].values.reshape(-1, 1) # DESDE AQUI
    y = grupo["Abandono"].values # HASTA AQUI PREPARA LOS DATOS PARA LA REGRESION LINEAL (X=AÑO, Y=ABANDONO ESCOLAR)

    modelo = LinearRegression() # DESDE AQUI
    modelo.fit(X, y) # HASTA AQUI SE ENTRENA EL MODELO CON LOS DATOS HISTORICOS Y APARTE LA FUNCION "FIT" SE UTILIZO PARA ENTRENAR EL MODELO DE APRENDIZAJE AUTOMATICO CON UN CONJUNTO DE DATOS LOS CUALES SON LOS DATOS HISTORICOS

    año_base = grupo["Año"].max() # DESDE AQUI
    abandono_actual = y[-1]
    abandono_pred = modelo.predict([[año_base + 10]])[0] # HASTA AQUI SE PREDICE EL ABANDONO ESCOLAR DENTRO DE 10 AÑOS DESPUES DEL ULTIMO AÑO EL CUAL FUE EL 2024
    diferencia = abandono_pred - abandono_actual # DESDE AQUI
    probabilidad = min(max(diferencia / 5.0, 0.0), 1.0) # MEJOR ESCALA, APARTE AQUI SE CALCULA UNA "PROBABILIDAD DE AUMENTO" (AJUSTADA A UN VALOR ENTRE 0 Y 1)

    resultados.append({ # DESDE AQUI
        "Entidad": entidad,
        "NivelEducativo": nivel,
        "Abandono_Actual (%)": round(abandono_actual, 2),
        "Predicción_2034 (%)": round(abandono_pred, 2),
        "Probabilidad_Aumento": round(probabilidad, 2)
    }) # HASTA AQUI LO QUE HACE ES GUARDAR LOS RESULTADOS DE PREDICCION PARA ESA ENTIDAD Y NIVEL, JUSTAMENTE SE UTILIZANDO LA FUNCION "APPEND" QUE ES PARA AÑADIR UN ELEMENTO AL FINAL DE UNS LISTA

df_resultados = pd.DataFrame(resultados) # DESDE AQUI

# 📦 GUARDAR COMO EXCEL
df_resultados.to_excel("Predicciones_Abandono_2034.xlsx", index=False) # HASTA AQUI SE CREA UNA DATAFRAME CON LOS RESULTADOS Y LOS GUARDA COMO ARCHIVO EXCEL, AQUI ESTA LINEA LO QUE HACE ES QUE AL MOMENTO DE GUARDAR LOS REULTADOS ES QUE LE NOMBRAREMOS AL ARCHIVO QUE SE CREARA CON BASE A LOS RESULTADOS
print("\n✅ Archivo 'Predicciones_Abandono_2034.xlsx' exportado correctamente.") # AQUI LO QUE HACE ES UNA HACE UN SALTO DE LINEA CON UN CARACTER DE NUEVA LINEA LA CUAL DIRA ESTO QUE ESTA EN COMMILLAS

# 📊 PASO 5: VISUALIACION PARA TODAS LAS ENTIDADES
# NORMALIZAR NOMBRES SI HAY DEMASIADOS
df_resultados["Entidad_Nivel"] = df_resultados["Entidad"] + " - " + df_resultados["NivelEducativo"] # AQUI SE CREA UNA COLUMNA COMBINADA PARA FACILITAR LAS GRAFICAS, LAS CUALES LAS QUE SE COMBINAN SON "ENTIDAD" + "NIVELEDUCATIVO" Y COMO RESULTADO DA = "ENTIDAD_NIVEL"

# 🔹 GRAFICO 1: PROBABILIDAD DE AUMENTO POR ENTIDAD Y NIVEL
plt.figure(figsize=(16, 10)) # AQUI SE CALCULA EL TAMAÑO DE DE LA VISUALIZACION
sns.barplot(data=df_resultados, y="Entidad_Nivel", x="Probabilidad_Aumento", palette="viridis") # AQUI GENERA UN GRAFICO DE BARRAS QUE MUESTRA LA PROBABILIDAD DE AUMENTO PARA CADA NIVEL, UTILIZANDO LA PALETA DE COLORES "VIRIDIS" PARA RESALTAR LAS DIFERENTES ENTIDADES
plt.title("Probabilidad de Aumento en Abandono Escolar en 10 años (por entidad y nivel)") # AQUI COMO TAL ESTAMOS ASIGNANDO EL NOMBRE DE LA GRAFICA EL CUAL UTILIZAMOS "TITTLE" PARA HACER REFERENCIA A TITULO
plt.xlabel("Probabilidad de Aumento") # AQUI SOLO SE LE ASIGNA EL NOMBRE AL EJE "X" EL CUAL AQUI NOS MOSTRARA LA PROBABILIDAD DE AUMENTO
plt.ylabel("Entidad - Nivel Educativo") # AQUI SOLO SE LE ASIGNA LAS ENTIDADES Y NIVEL EDUCATIVO EN EL EJE "Y" PARA QUE EN EL EJE "X" PUEDA MOSTRAR EL RESULTADO DE LA PROBABILIDAD DE AUMENTO
plt.xlim(0, 1) # AQUI SE ESTABLECE LOS LIMITES DEL EJE "X" DE UN GRAFICO A UN RANGO ESPECIFICAMENTE EN ESTE CASO, DE 0 A 1
plt.tight_layout() # SE AJUSTA AUMATICAMENTE LOS PARAMETROS DE LAS SUBPARCELAR (O SUBPLOTS) DENTRO DE UNA FIGURA PARA EVITAR QUE LOS ELEMENTOS GRAFICOS SE SUPERPONGAN, COMO ETIQUTAS DE LOS EJEES, TITULOS O LEYENDAS
plt.show() # AQUI MUESTRA LOS GRAFICOS CREADOS UTILIZANDO LA LIBRERIA MATPLOTLIB, ESTO ES COMO EL "PRINT" QUE IMPRIME LOS RESULTADOS YA GRAFICADOS

# 🔹 GRAFICO 2: COMPARACION DE ABANDONO ACTUAL VS LA PREDICCION
plt.figure(figsize=(16, 10)) # AQUI CREA UNA FIGURA DE MATPLOTLIB CON UN TAMAÑO ESPECIFICO (16 PULGADAS DE ANCHO POR 10 DE ALTO) ESTE TAMAÑO PREDERTINADO PUEDE SER UTIL PARA QUE EL GRAFICO SE VEA BIEN
df_melted = pd.melt(df_resultados, # TRANSFORMA EL DATAFRAME "DF.RESULTADOS" UTILIZANDO LA FUNCION "PD.MELT"
                    id_vars=["Entidad", "NivelEducativo"], # INDICA QUE LAS COLUMNAS "ENTIDAD" Y "NIVELEDUCATIVO" DEBEN PERMANECER COMO IDENTIFICADORES Y NO SER TRANSFORMADORES EN EL PROCESO DE "MELTING"
                    value_vars=["Abandono_Actual (%)", "Predicción_2034 (%)"], # ESPECIFICA LAS COLUMNAS QUE SE VAN A CONVERTIR EN LA COLUMNA "PERIODO" Y "TASA"
                    var_name="Periodo", value_name="Tasa") # DEFINE EL NOMBRE DE LA NUEVA COLUMNA Y QUE CONTENDRA LOS NOMBRES DE LAS VARIABLES ORIGINALES "VALUE_NAM" DEFINE EL NOMBRE DE LA NUEVA COLUMNA QUE CONTENDRA LOS NOMBRES DE LAS VARIABLES ORIGINALES
sns.barplot(data=df_melted, x="Tasa", y="Entidad", hue="Periodo", ci=None) # AQUI CREA UNA GRAFICO DE BARRAS UTILIZANDO LA FUCION "SNS.BARPLOT" DE LA BIBLIOTECA SEABORN, Y SE UTILIZAN LAS COLUMNAS DEL DATAFRAME "DF_MELTED" PARA CONSTRUIR EL GRAFICO
plt.title("Comparación: Abandono Actual vs Predicción 2034") # AQUI SE ESTABLECE EL TITULO DEL GRAFICO
plt.tight_layout() # AJUSTA EL DISEÑO DEL GRAFICO PARA EVITAR QUE LOS ELEMENTOS (TITULO, ETIQUETAS DE LOS EJES, ETC) SE SUPERPONGAN, ESPECIALMENTE EN GRAFICOS CON MUCHOS ELEMENTOS
plt.show() # AQUI COMO YA BIEN HE DICHO MUESTRA EL GRAFICO GENERADO